
==Entity Class==

import jakarta.persistence.Entity;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.GenerationType;
import jakarta.persistence.Id;

@Entity
public class Product {
    
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long productCode;
    private String name;
    private String vendor;
    private double price;
	public Long getProductCode() {
		return productCode;
	}
	public void setProductCode(Long productCode) {
		this.productCode = productCode;
	}
	public String getName() {
		return name;
	}
	public void setName(String name) {
		this.name = name;
	}
	public String getVendor() {
		return vendor;
	}
	public void setVendor(String vendor) {
		this.vendor = vendor;
	}
	public double getPrice() {
		return price;
	}
	public void setPrice(double price) {
		this.price = price;
	}
	public Product(Long productCode, String name, String vendor, double price) {
		super();
		this.productCode = productCode;
		this.name = name;
		this.vendor = vendor;
		this.price = price;
	}
	@Override
	public String toString() {
		return "Product [productCode=" + productCode + ", name=" + name + ", vendor=" + vendor + ", price=" + price
				+ "]";
	}

  
}

==DTO Class==


public class ProductDTO {

    private Long productCode;
    private String name;
    private String vendor;
    private double price;

    	public Long getProductCode() {
		return productCode;
	}
	public void setProductCode(Long productCode) {
		this.productCode = productCode;
	}
	public String getName() {
		return name;
	}
	public void setName(String name) {
		this.name = name;
	}
	public String getVendor() {
		return vendor;
	}
	public void setVendor(String vendor) {
		this.vendor = vendor;
	}
	public double getPrice() {
		return price;
	}
	public void setPrice(double price) {
		this.price = price;
	}
	public Product(Long productCode, String name, String vendor, double price) {
		super();
		this.productCode = productCode;
		this.name = name;
		this.vendor = vendor;
		this.price = price;
	}
}


==Repository Class==

import org.springframework.data.jpa.repository.JpaRepository;

public interface ProductRepository extends JpaRepository<Product, Long> {
}


==Service Class==

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import java.util.List;
import java.util.Optional;
import java.util.stream.Collectors;

@Service
public class ProductService {

    @Autowired
    private ProductRepository productRepository;

    public List<ProductDTO> getProducts(String productName, String productVendor) {
        return productRepository.findByNameContainingAndVendorContaining(productName, productVendor)
                .stream()
                .map(this::convertToDTO)
                .collect(Collectors.toList());
    }

    public void deleteProduct(long productCode) throws ProductNotFoundException {
        Optional<Product> product = productRepository.findById(productCode);
        if (product.isPresent()) {
            productRepository.deleteById(productCode);
        } else {
            throw new ProductNotFoundException("Product with code " + productCode + " not found");
        }
    }

    public String addProduct(ProductDTO productDTO) {
        Product product = convertToEntity(productDTO);
        productRepository.save(product);
        return product.getName();
    }

    private ProductDTO convertToDTO(Product product) {
        ProductDTO productDTO = new ProductDTO();
        productDTO.setProductCode(product.getProductCode());
        productDTO.setName(product.getName());
        productDTO.setVendor(product.getVendor());
        productDTO.setPrice(product.getPrice());
        return productDTO;
    }

    private Product convertToEntity(ProductDTO productDTO) {
        Product product = new Product();
        product.setProductCode(productDTO.getProductCode());
        product.setName(productDTO.getName());
        product.setVendor(productDTO.getVendor());
        product.setPrice(productDTO.getPrice());
        return product;
    }
}

==Controller Class==

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import javax.validation.Valid;
import java.util.List;

@RestController
@RequestMapping("/api")
public class ProductController {

    @Autowired
    private ProductService productService;

    @GetMapping("/product")
    public List<ProductDTO> getProducts(
            @RequestParam(required = false) String productName,
            @RequestParam(required = false) String productVendor) {
        return productService.getProducts(productName, productVendor);
    }

    @DeleteMapping("/product/{productCode}")
    public ResponseEntity<String> deleteProduct(@PathVariable long productCode) {
        try {
            productService.deleteProduct(productCode);
            return new ResponseEntity<>("Product deleted", HttpStatus.OK);
        } catch (ProductNotFoundException e) {
            return new ResponseEntity<>(e.getMessage(), HttpStatus.NOT_FOUND);
        }
    }

    @PostMapping("/product")
    public ResponseEntity<String> addProduct(@RequestBody @Valid ProductDTO productDTO) {
        if (productDTO.getName().length() < 5 || productDTO.getName().length() > 10) {
            return new ResponseEntity<>("Product name must be between 5 and 10 characters long", HttpStatus.BAD_REQUEST);
        }
        String productName = productService.addProduct(productDTO);
        return new ResponseEntity<>("Product added successfully: " + productName, HttpStatus.OK);
    }
}


==Exception Class==

public class ProductNotFoundException extends RuntimeException {

    public ProductNotFoundException(String message) {
        super(message);
    }
}

==Global Exception Class==

import org.springframework.web.bind.annotation.ControllerAdvice;
import org.springframework.web.bind.annotation.ExceptionHandler;
import org.springframework.http.ResponseEntity;
import org.springframework.http.HttpStatus;

@ControllerAdvice
public class GlobalExceptionHandler {

    @ExceptionHandler(ProductNotFoundException.class)
    public ResponseEntity<String> handleProductNotFoundException(ProductNotFoundException e) {
        return new ResponseEntity<>(e.getMessage(), HttpStatus.NOT_FOUND);
    }
}














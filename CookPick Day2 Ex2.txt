==Exception Class==

public class ProductNotFoundException extends RuntimeException {

    public ProductNotFoundException(String message) {
        super(message);
    }
}

==Service Class==

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import java.util.Optional;

@Service
public class ProductService {

    @Autowired
    private ProductRepository productRepository;

    public List<Product> getProducts(String productName, String productVendor) {
        return productRepository.findByNameContainingAndVendorContaining(productName, productVendor);
    }

    public void deleteProduct(long productCode) throws ProductNotFoundException {
        Optional<Product> product = productRepository.findById(productCode);
        if (product.isPresent()) {
            productRepository.deleteById(productCode);
        } else {
            throw new ProductNotFoundException("Product with code " + productCode + " not found");
        }
    }
}

==Controller Class==

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.bind.annotation.ExceptionHandler;

@RestController
public class ProductController {

    @Autowired
    private ProductService productService;

    @GetMapping("/product")
    public List<Product> getProducts(
            @RequestParam(required = false) String productName,
            @RequestParam(required = false) String productVendor) {
        return productService.getProducts(productName, productVendor);
    }

    @DeleteMapping("/product/{productCode}")
    public ResponseEntity<String> deleteProduct(@PathVariable long productCode) {
        try {
            productService.deleteProduct(productCode);
            return new ResponseEntity<>("Product deleted", HttpStatus.OK);
        } catch (ProductNotFoundException e) {
            return new ResponseEntity<>(e.getMessage(), HttpStatus.NOT_FOUND);
        }
    }
}


==ExceptionHandler Class==

import org.springframework.web.bind.annotation.ControllerAdvice;
import org.springframework.web.bind.annotation.ExceptionHandler;
import org.springframework.http.ResponseEntity;
import org.springframework.http.HttpStatus;

@ControllerAdvice
public class GlobalExceptionHandler {

    @ExceptionHandler(ProductNotFoundException.class)
    public ResponseEntity<String> handleProductNotFoundException(ProductNotFoundException e) {
        return new ResponseEntity<>(e.getMessage(), HttpStatus.NOT_FOUND);
    }
}













































